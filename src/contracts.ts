/**
 * Generated by 'generator-ego' (https://github.com/egodigital/generator-ego)
 *
 * by e.GO Digital GmbH, Aachen, Germany (https://e-go-digital.com)
 */

import * as egoose from '@egodigital/egoose';
import * as express from 'express';
import * as mongodb from './mongodb';

/**
 * An API context.
 */
export interface ApiContext {
    /**
     * Stores the current host instance.
     */
    readonly host: express.Express;

    /**
     * The global logger instance.
     */
    readonly logger: egoose.Logger;

    /**
     * Invokes an action for an open database connection.
     *
     * @param {WithDatabaseAction<TResult>} action The action to invoke.
     *
     * @return {Promise<TResult>} The promise with the result of {action}.
     */
    withDatabase<TResult = any>(action: WithDatabaseAction<TResult>): Promise<TResult>;
}

/**
 * An extended request context of an API call.
 */
export interface ApiRequest extends RequestWithLogger {
}

/**
 * A request context with a logger instance.
 */
export interface RequestWithLogger extends express.Request {
    /**
     * The logger used for the request.
     */
    readonly logger: egoose.Logger;
}

/**
 * Describes an action for a 'AppContext#withDatabase' method.
 *
 * @param {mongodb.Database} db The current database (connection).
 * @param {boolean} [useTransaction] Run in transaction or not. Default: (false)
 *
 * @return {TResult|Promise<TResult>} The result of that action.
 */
export type WithDatabaseAction<TResult = any> = (db: mongodb.Database, useTransaction?: boolean) => TResult | Promise<TResult>;
